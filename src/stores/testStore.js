// stores/testStore.js - –†–µ–µ—Å—Ç—Ä —Ç–µ—Å—Ç–æ–≤ –≤ store
import { defineStore } from 'pinia'

export const useTestStore = defineStore('tests', {
  state: () => ({
    availableTests: [],
    loadedTests: new Map(), // –ö–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    isLoading: false,
  }),

  getters: {
    getAllTests: (state) => state.availableTests,
    
    getTestById: (state) => (testId) => {
      return state.availableTests.find(test => test.id === testId) || null
    },

    getTestsByCategory: (state) => (category) => {
      return state.availableTests.filter(test => test.category === category)
    },

    isTestLoaded: (state) => (testId) => {
      return state.loadedTests.has(testId)
    },

    getLoadedTest: (state) => (testId) => {
      return state.loadedTests.get(testId) || null
    }
  },

  actions: {
    // =================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===================
    
    async initializeTests() {
      console.log('üß™ Initializing test registry...')
      
      try {
        this.isLoading = true
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await this._registerAllTests()
        
        console.log(`‚úÖ Initialized ${this.availableTests.length} tests`)
      } catch (error) {
        console.error('‚ùå Failed to initialize tests:', error)
      } finally {
        this.isLoading = false
      }
    },

    // =================== –ó–ê–ì–†–£–ó–ö–ê –¢–ï–°–¢–û–í ===================
    
    async loadTest(testId) {
      console.log('üìñ Loading test:', testId)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (this.loadedTests.has(testId)) {
        console.log('‚ú® Test loaded from cache:', testId)
        return this.loadedTests.get(testId)
      }

      try {
        let testModule = null

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤
        switch (testId) {
          case 'husband-readiness':
            testModule = await import('../tests/husband-readiness/index.js')
            break
            
          case 'stress-burnout':
            testModule = await import('../tests/stress-burnout/index.js')
            break
            
          default:
            throw new Error(`Unknown test: ${testId}`)
        }

        // –ö–µ—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        const loadedTest = testModule.default
        this.loadedTests.set(testId, loadedTest)

        console.log('‚úÖ Test loaded:', testId, loadedTest.config.title)
        return loadedTest
      } catch (error) {
        console.error('‚ùå Failed to load test:', testId, error)
        throw error
      }
    },

    // =================== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===================
    
    async _registerAllTests() {
      // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–µ—Å—Ç—Ä —Ç–µ—Å—Ç–æ–≤ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞)
      this.availableTests = [
        {
          id: 'husband-readiness',
          title: '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–µ—Ä—å–µ–∑–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º',
          description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –∫ —Å–µ—Ä—å–µ–∑–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º –∏ —Å–æ–∑–¥–∞–Ω–∏—é —Å–µ–º—å–∏',
          category: 'relationships',
          duration: 5,
          difficulty: 'easy',
          tags: ['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ª—é–±–æ–≤—å', '—Å–µ–º—å—è'],
          icon: 'üíï',
          color: '#10b981',
          isAvailable: true,
          createdAt: '2024-01-01',
        },
        {
          id: 'stress-burnout',
          title: '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è',
          description: '–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –∏ —Ä–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è',
          category: 'wellbeing',
          duration: 8,
          difficulty: 'medium',
          tags: ['—Å—Ç—Ä–µ—Å—Å', '—Ä–∞–±–æ—Ç–∞', '–∑–¥–æ—Ä–æ–≤—å–µ'],
          icon: 'üßò',
          color: '#6366f1',
          isAvailable: true,
          createdAt: '2024-01-01',
        },
        // –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        {
          id: 'personality-type',
          title: '–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏',
          description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏',
          category: 'personality',
          duration: 12,
          difficulty: 'medium',
          tags: ['–ª–∏—á–Ω–æ—Å—Ç—å', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', '–ø—Å–∏—Ö–æ—Ç–∏–ø'],
          icon: 'üé≠',
          color: '#f59e0b',
          isAvailable: false, // –ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤
          createdAt: '2024-02-01',
        },
        {
          id: 'anxiety-level',
          title: '–£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏',
          description: '–ò–∑–º–µ—Ä—å—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
          category: 'wellbeing',
          duration: 10,
          difficulty: 'easy',
          tags: ['—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–∑–¥–æ—Ä–æ–≤—å–µ'],
          icon: 'üò∞',
          color: '#ef4444',
          isAvailable: false, // –ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤
          createdAt: '2024-02-15',
        }
      ]

      console.log('üìã Registered tests:', this.availableTests.map(t => t.id))
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –≤ –±—É–¥—É—â–µ–º)
    async addTest(testConfig) {
      console.log('‚ûï Adding new test:', testConfig.id)
      
      this.availableTests.push({
        ...testConfig,
        createdAt: new Date().toISOString(),
      })
      
      console.log('‚úÖ Test added to registry')
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∞
    async updateTestStatus(testId, isAvailable) {
      const test = this.availableTests.find(t => t.id === testId)
      
      if (test) {
        test.isAvailable = isAvailable
        console.log(`‚úÖ Test ${testId} status updated:`, isAvailable)
      }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
    getTestsStats() {
      const totalTests = this.availableTests.length
      const availableTests = this.availableTests.filter(t => t.isAvailable).length
      const categories = [...new Set(this.availableTests.map(t => t.category))]
      
      return {
        totalTests,
        availableTests,
        inDevelopment: totalTests - availableTests,
        categories: categories.length,
        categoriesList: categories
      }
    },

    // –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤
    searchTests(query) {
      const searchQuery = query.toLowerCase().trim()
      
      return this.availableTests.filter(test => {
        return test.title.toLowerCase().includes(searchQuery) ||
               test.description.toLowerCase().includes(searchQuery) ||
               test.tags.some(tag => tag.toLowerCase().includes(searchQuery))
      })
    },

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    clearCache() {
      this.loadedTests.clear()
      console.log('üóëÔ∏è Test cache cleared')
    }
  }
})