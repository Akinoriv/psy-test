// src/core/storage/StorageManager.js
class StorageManager {
  constructor() {
    this.version = '1.0.0'
    this.adapters = {
      local: new LocalStorageAdapter(),
      // indexed: new IndexedDBAdapter(), // –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      // api: new APIAdapter() // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    }
    this.currentAdapter = this.adapters.local
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  setAdapter(adapterType) {
    if (this.adapters[adapterType]) {
      this.currentAdapter = this.adapters[adapterType]
      console.log(`üì¶ Storage adapter changed to: ${adapterType}`)
    } else {
      console.warn(`Unknown storage adapter: ${adapterType}`)
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
  async saveTestResult(userId, result) {
    const resultWithMetadata = {
      ...result,
      userId,
      version: this.version,
      savedAt: new Date().toISOString(),
      id: this.generateId()
    }
    
    console.log('üíæ Saving test result:', resultWithMetadata.testId, 'Score:', resultWithMetadata.score)
    return await this.currentAdapter.save('test-results', resultWithMetadata)
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  async loadTestResults(userId, testId = null) {
    const allResults = await this.currentAdapter.load('test-results') || []
    
    let userResults = allResults.filter(r => r.userId === userId)
    
    if (testId) {
      userResults = userResults.filter(r => r.testId === testId)
    }
    
    console.log(`üìñ Loaded ${userResults.length} test results for user ${userId}`)
    return userResults.sort((a, b) => new Date(b.savedAt) - new Date(a.savedAt))
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Å—Ç–∞
  async saveProgress(userId, testId, progress) {
    const key = `progress-${userId}-${testId}`
    const progressWithMetadata = {
      ...progress,
      userId,
      testId,
      savedAt: new Date().toISOString()
    }
    
    console.log('üíæ Saving progress:', testId, 'Question:', progress.currentQuestionIndex)
    return await this.currentAdapter.save(key, progressWithMetadata)
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  async loadProgress(userId, testId) {
    const key = `progress-${userId}-${testId}`
    const progress = await this.currentAdapter.load(key)
    
    if (progress) {
      console.log('üìñ Loaded progress:', testId, 'Question:', progress.currentQuestionIndex)
    }
    
    return progress
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  async clearProgress(userId, testId) {
    const key = `progress-${userId}-${testId}`
    console.log('üóëÔ∏è Clearing progress:', testId)
    return await this.currentAdapter.remove(key)
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveUser(user) {
    console.log('üíæ Saving user:', user.name)
    return await this.currentAdapter.save('user', user)
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async loadUser() {
    const user = await this.currentAdapter.load('user')
    if (user) {
      console.log('üìñ Loaded user:', user.name)
    }
    return user
  }
  
  generateId() {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
  }
}

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è localStorage (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
class LocalStorageAdapter {
  async save(key, data) {
    try {
      const storageKey = `psy-${key}`
      
      if (key === 'test-results') {
        // –î–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –º–∞—Å—Å–∏–≤—É
        const existing = this.load(key) || []
        const updated = [...existing, data]
        localStorage.setItem(storageKey, JSON.stringify(updated))
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        localStorage.setItem(storageKey, JSON.stringify(data))
      }
      
      return true
    } catch (error) {
      console.error('LocalStorage save error:', error)
      return false
    }
  }
  
  async load(key) {
    try {
      const storageKey = `psy-${key}`
      const item = localStorage.getItem(storageKey)
      return item ? JSON.parse(item) : null
    } catch (error) {
      console.error('LocalStorage load error:', error)
      return null
    }
  }
  
  async remove(key) {
    try {
      const storageKey = `psy-${key}`
      localStorage.removeItem(storageKey)
      return true
    } catch (error) {
      console.error('LocalStorage remove error:', error)
      return false
    }
  }
  
  async clear() {
    try {
      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –∫–ª—é—á–∏
      const keys = []
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i)
        if (key && key.startsWith('psy-')) {
          keys.push(key)
        }
      }
      
      keys.forEach(key => localStorage.removeItem(key))
      return true
    } catch (error) {
      console.error('LocalStorage clear error:', error)
      return false
    }
  }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
class IndexedDBAdapter extends LocalStorageAdapter {
  // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  constructor() {
    super()
    console.log('üìä IndexedDB adapter initialized (fallback to localStorage)')
  }
}

class APIAdapter extends LocalStorageAdapter {
  // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  constructor() {
    super()
    console.log('üåê API adapter initialized (fallback to localStorage)')
  }
}

export default StorageManager