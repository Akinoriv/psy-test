import { ref, computed, watch } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { useUserStore } from '../stores/userStore.js'
import { useTestStore } from '../stores/testStore.js'
import TestRegistry from '../core/test-engine/TestRegistry'
import StorageManager from '../core/storage/StorageManager'
import { useDemographics } from './useDemographics.js'

// –ò–ú–ü–û–†–¢–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ù–£–ñ–ù–´ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö!
import SingleChoice from '../components/SingleChoice.vue'
import MultipleChoice from '../components/MultipleChoice.vue'
import ScaleQuestion from '../components/ScaleQuestion.vue'

export function useTestLogic() {
  const router = useRouter()
  const route = useRoute()
  const userStore = useUserStore()
  const testStore = useTestStore()
  const storageManager = new StorageManager()
  const { getUserDemographics } = useDemographics()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
  const testStarted = ref(false)
  const currentQuestionIndex = ref(0)
  const currentAnswer = ref(null)
  const questionsFlow = ref([])
  const answeredQuestions = ref({})
  const currentTest = ref(null)
  const isLoading = ref(false)

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const testProgress = computed(() => {
    if (questionsFlow.value.length === 0) return 0

    const answeredCount = Object.keys(answeredQuestions.value).length
    if (answeredCount === 0) return 0

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ç–æ–∫–µ
    const currentProgress = ((currentQuestionIndex.value + 1) / questionsFlow.value.length) * 100
    return Math.min(95, Math.round(currentProgress))
  })

  const currentQuestion = computed(() => {
    return questionsFlow.value[currentQuestionIndex.value] || null
  })

  const currentQuestionComponent = computed(() => {
    if (!currentQuestion.value) return null

    const componentMap = {
      single: SingleChoice,
      multiple: MultipleChoice,
      scale: ScaleQuestion,
    }

    return componentMap[currentQuestion.value.type] || SingleChoice
  })

  const currentQuestionNumber = computed(() => currentQuestionIndex.value + 1)
  const totalQuestions = computed(() => questionsFlow.value.length || 1)
  const canGoToPrevious = computed(() => currentQuestionIndex.value > 0)
  const canGoToNext = computed(() => currentQuestionIndex.value < questionsFlow.value.length)

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const isLastQuestion = computed(() => {
    console.log('Checking isLastQuestion:', {
      currentIndex: currentQuestionIndex.value,
      flowLength: questionsFlow.value.length,
      isAnswered: isCurrentQuestionAnswered.value,
      currentQuestionId: currentQuestion.value?.id,
    })

    // –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ - —Ç–æ—á–Ω–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    if (currentQuestionIndex.value < questionsFlow.value.length - 1) {
      console.log('Not last question - more questions in current flow')
      return false
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ—Ç–æ–∫–µ –ò –µ—Å—Ç—å –æ—Ç–≤–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if (currentQuestion.value && isCurrentQuestionAnswered.value) {
      const nextQuestions = getNextQuestions(currentQuestion.value, currentAnswer.value)
      console.log('Checking next questions:', nextQuestions.length)
      return nextQuestions.length === 0
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ - –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    console.log('No answer yet, treating as not last')
    return false
  })

  const isCurrentQuestionAnswered = computed(() => {
    if (currentAnswer.value === null || currentAnswer.value === '') return false
    if (Array.isArray(currentAnswer.value)) return currentAnswer.value.length > 0
    return true
  })

  // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ TestRegistry
  const loadTestData = async () => {
    try {
      isLoading.value = true
      console.log('üîç Loading test data for:', route.params.testId)

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
      await TestRegistry.discoverTests()

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
      const testModule = TestRegistry.get(route.params.testId)

      if (!testModule) {
        console.error(`‚ùå Test not found: ${route.params.testId}`)

        // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        console.log('‚ö†Ô∏è Trying legacy system...')
        await loadTestDataLegacy()
        return
      }

      currentTest.value = testModule
      console.log('‚úÖ Test loaded:', testModule.config.title)
    } catch (error) {
      console.error('‚ùå Failed to load test:', error)

      // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
      try {
        await loadTestDataLegacy()
      } catch (legacyError) {
        console.error('‚ùå Legacy system also failed:', legacyError)
        router.push('/dashboard')
      }
    } finally {
      isLoading.value = false
    }
  }

  // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const loadTestDataLegacy = async () => {
    console.log('üîÑ Using legacy test loading system')

    switch (route.params.testId) {
      case 'stress-burnout':
        const { stressBurnoutTest } = await import('../data/stressTest.js')

        // –°–æ–∑–¥–∞–µ–º wrapper –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        currentTest.value = {
          config: stressBurnoutTest,
          calculator: {
            calculate: async (answers, demographics, config) => {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
              const { calculateTestResult } = await import('../utils/testUtils.js')
              return calculateTestResult({
                testId: config.id,
                answeredQuestions: answers,
                testData: config,
                demographics,
              })
            },
          },
          interpreter: {
            interpret: async (score) => {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
              const { getResultInterpretation } = await import('../utils/testUtils.js')
              return getResultInterpretation(score, currentTest.value.config)
            },
            generatePersonalizedNotes: (score, demographics) => {
              const { generatePersonalizedNotes } = useDemographics()
              return generatePersonalizedNotes(score, demographics, currentTest.value.config)
            },
          },
        }
        break
      default:
        throw new Error(`Unknown test ID: ${route.params.testId}`)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  const initializeQuestionFlow = () => {
    if (!currentTest.value?.config?.initialQuestions) return

    questionsFlow.value = [...currentTest.value.config.initialQuestions]
    loadSavedAnswer()
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const loadSavedAnswer = () => {
    const questionId = currentQuestion.value?.id
    if (questionId && answeredQuestions.value[questionId]) {
      currentAnswer.value = answeredQuestions.value[questionId].answer
    } else {
      currentAnswer.value = currentQuestion.value?.type === 'multiple' ? [] : null
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  const handleAnswerChange = (answer) => {
    currentAnswer.value = answer

    const questionId = currentQuestion.value.id
    answeredQuestions.value[questionId] = {
      questionId,
      question: currentQuestion.value.question,
      answer: answer,
      timestamp: new Date().toISOString(),
      type: currentQuestion.value.type,
    }

    saveProgressToStorage()
  }

  // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ StorageManager
  const saveProgressToStorage = async () => {
    const progress = {
      testId: route.params.testId,
      currentQuestionIndex: currentQuestionIndex.value,
      answeredQuestions: answeredQuestions.value,
      questionsFlow: questionsFlow.value,
    }

    await storageManager.saveProgress(userStore.user.id, route.params.testId, progress)
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const getNextQuestions = (question, answer) => {
    if (!currentTest.value?.config?.questionFlows) return []

    console.log('Getting next questions for:', {
      questionId: question.id,
      answer,
      type: question.type,
    })

    let nextQuestions = []

    if (question.type === 'single' && question.options) {
      const selectedOption = question.options.find((opt) => opt.value === answer)
      if (selectedOption?.nextFlow) {
        nextQuestions = currentTest.value.config.questionFlows[selectedOption.nextFlow] || []
        console.log('Single choice next flow:', selectedOption.nextFlow, nextQuestions.length)
      }
    }

    if (question.type === 'scale' && question.conditions) {
      for (const [conditionName, config] of Object.entries(question.conditions)) {
        let meetsCondition = false

        if (config.min && config.max) {
          meetsCondition = answer >= config.min && answer <= config.max
        } else if (config.min) {
          meetsCondition = answer >= config.min
        } else if (config.max) {
          meetsCondition = answer <= config.max
        }

        if (meetsCondition && config.nextFlow) {
          nextQuestions = currentTest.value.config.questionFlows[config.nextFlow] || []
          console.log('Scale condition met:', conditionName, config, nextQuestions.length)
          break
        }
      }
    }

    if (question.type === 'multiple' && Array.isArray(answer) && question.options) {
      let maxWeight = 0
      let selectedFlow = null

      answer.forEach((answerValue) => {
        const option = question.options.find((opt) => opt.value === answerValue)
        if (option && option.weight > maxWeight && option.nextFlow) {
          maxWeight = option.weight
          selectedFlow = option.nextFlow
        }
      })

      if (selectedFlow) {
        nextQuestions = currentTest.value.config.questionFlows[selectedFlow] || []
        console.log('Multiple choice next flow:', selectedFlow, nextQuestions.length)
      }
    }

    return nextQuestions
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const goToNextQuestion = () => {
    if (!isCurrentQuestionAnswered.value) return

    console.log('Going to next question, current index:', currentQuestionIndex.value)
    console.log('Current flow length:', questionsFlow.value.length)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ü–ï–†–ï–î –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    const nextQuestions = getNextQuestions(currentQuestion.value, currentAnswer.value)

    // –ï—Å–ª–∏ –º—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ–ø—Ä–æ—Å–µ –≤ –ø–æ—Ç–æ–∫–µ –ò –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    if (
      currentQuestionIndex.value >= questionsFlow.value.length - 1 &&
      nextQuestions.length === 0
    ) {
      console.log('Finishing test - no more questions')
      finishTest()
      return
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if (nextQuestions.length > 0) {
      const insertIndex = currentQuestionIndex.value + 1
      questionsFlow.value.splice(insertIndex, 0, ...nextQuestions)
      console.log(
        'Added next questions:',
        nextQuestions.length,
        'New flow length:',
        questionsFlow.value.length,
      )
    }

    currentQuestionIndex.value++
    console.log('New question index:', currentQuestionIndex.value)
    loadSavedAnswer()
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const goToPreviousQuestion = () => {
    if (canGoToPrevious.value) {
      currentQuestionIndex.value--
      loadSavedAnswer()
    }
  }

  // –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
  const startTest = () => {
    testStarted.value = true
    initializeQuestionFlow()
  }

  // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
  const finishTest = async () => {
    try {
      console.log('Finishing test with answers:', Object.keys(answeredQuestions.value).length)

      if (Object.keys(answeredQuestions.value).length === 0) {
        console.error('No answers to process')
        alert('–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.')
        return
      }

      const demographics = getUserDemographics()

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º calculator –∏–∑ –º–æ–¥—É–ª—è —Ç–µ—Å—Ç–∞
      const result = currentTest.value.calculator.calculate(
        answeredQuestions.value,
        demographics,
        currentTest.value.config,
      )

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º interpreter –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
      const interpretation = currentTest.value.interpreter.interpret(result.score)
      const personalizedNotes = currentTest.value.interpreter.generatePersonalizedNotes(
        result.score,
        demographics,
      )

      const finalResult = {
        testId: route.params.testId,
        ...result,
        interpretation,
        personalizedNotes,
        demographics,
        completedAt: new Date().toISOString(),
      }

      console.log('Test result calculated:', finalResult)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ StorageManager
      await storageManager.saveTestResult(userStore.user.id, finalResult)
      await storageManager.clearProgress(userStore.user.id, route.params.testId)

      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      userStore.saveTestResult(finalResult)

      console.log('Navigating to results page...')
      router.push(`/result/${route.params.testId}`)
    } catch (error) {
      console.error('Failed to finish test:', error)
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    }
  }

  // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –¥–∞—à–±–æ—Ä–¥
  const goBack = () => {
    const shouldExit =
      !testStarted.value || confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')

    if (shouldExit) {
      router.push('/dashboard')
    }
  }

  // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const loadSavedProgress = async () => {
    try {
      const progress = await storageManager.loadProgress(userStore.user.id, route.params.testId)

      if (progress) {
        currentQuestionIndex.value = progress.currentQuestionIndex || 0
        answeredQuestions.value = progress.answeredQuestions || {}
        questionsFlow.value = progress.questionsFlow || []
        testStarted.value = questionsFlow.value.length > 0

        if (testStarted.value) {
          loadSavedAnswer()
        }

        console.log('‚úÖ Loaded saved progress')
      } else {
        console.log('üìù No saved progress found')
      }
    } catch (error) {
      console.error('‚ùå Failed to load saved progress:', error)
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
      try {
        const saved = localStorage.getItem('test-progress')
        if (!saved) return

        const progress = JSON.parse(saved)
        if (progress.testId !== route.params.testId) return

        currentQuestionIndex.value = progress.currentQuestionIndex || 0
        answeredQuestions.value = progress.answeredQuestions || {}
        questionsFlow.value = progress.questionsFlow || []
        testStarted.value = questionsFlow.value.length > 0

        if (testStarted.value) {
          loadSavedAnswer()
        }

        console.log('‚úÖ Loaded progress from legacy system')
      } catch (legacyError) {
        console.error('‚ùå Failed to load legacy progress:', legacyError)
      }
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const initialize = async () => {
    if (!userStore.isAuthenticated) {
      router.push('/')
      return
    }

    await loadTestData()
    await loadSavedProgress()
  }

  // Watcher –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
  watch(() => currentQuestionIndex.value, loadSavedAnswer)

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    testStarted,
    currentQuestionIndex,
    currentAnswer,
    questionsFlow,
    answeredQuestions,
    currentTest,
    isLoading,

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    testProgress,
    currentQuestion,
    currentQuestionComponent,
    currentQuestionNumber,
    totalQuestions,
    canGoToPrevious,
    canGoToNext,
    isLastQuestion,
    isCurrentQuestionAnswered,

    // –ú–µ—Ç–æ–¥—ã
    handleAnswerChange,
    goToNextQuestion,
    goToPreviousQuestion,
    startTest,
    finishTest,
    goBack,
    initialize,
  }
}
