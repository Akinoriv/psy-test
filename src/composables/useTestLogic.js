import { ref, computed, watch } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { useUserStore } from '../stores/userStore.js'
import { useTestStore } from '../stores/testStore.js'
import TestRegistry from '../core/test-engine/TestRegistry'
import { useDemographics } from './useDemographics.js'

// –ò–ú–ü–û–†–¢–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ù–£–ñ–ù–´ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö!
import SingleChoice from '../components/SingleChoice.vue'
import MultipleChoice from '../components/MultipleChoice.vue'
import ScaleQuestion from '../components/ScaleQuestion.vue'

export function useTestLogic() {
  const router = useRouter()
  const route = useRoute()
  const userStore = useUserStore()
  const testStore = useTestStore()
  const { getUserDemographics } = useDemographics()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
  const testStarted = ref(false)
  const currentQuestionIndex = ref(0)
  const currentAnswer = ref(null)
  const questionsFlow = ref([])
  const answeredQuestions = ref({})
  const currentTest = ref(null)
  const isLoading = ref(false)

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const testProgress = computed(() => {
    if (questionsFlow.value.length === 0) return 0

    const answeredCount = Object.keys(answeredQuestions.value).length
    if (answeredCount === 0) return 0

    const currentProgress = ((currentQuestionIndex.value + 1) / questionsFlow.value.length) * 100
    return Math.min(95, Math.round(currentProgress))
  })

  const currentQuestion = computed(() => {
    return questionsFlow.value[currentQuestionIndex.value] || null
  })

  const currentQuestionComponent = computed(() => {
    if (!currentQuestion.value) return null

    const componentMap = {
      single: SingleChoice,
      multiple: MultipleChoice,
      scale: ScaleQuestion,
    }

    return componentMap[currentQuestion.value.type] || SingleChoice
  })

  const currentQuestionNumber = computed(() => currentQuestionIndex.value + 1)
  const totalQuestions = computed(() => questionsFlow.value.length || 1)
  const canGoToPrevious = computed(() => currentQuestionIndex.value > 0)
  const canGoToNext = computed(() => currentQuestionIndex.value < questionsFlow.value.length)

  const isLastQuestion = computed(() => {
    if (currentQuestionIndex.value < questionsFlow.value.length - 1) {
      return false
    }

    if (currentQuestion.value && isCurrentQuestionAnswered.value) {
      const nextQuestions = getNextQuestions(currentQuestion.value, currentAnswer.value)
      return nextQuestions.length === 0
    }

    return false
  })

  const isCurrentQuestionAnswered = computed(() => {
    if (currentAnswer.value === null || currentAnswer.value === '') return false
    if (Array.isArray(currentAnswer.value)) return currentAnswer.value.length > 0
    return true
  })

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ TestRegistry
  const loadTestData = async () => {
    try {
      isLoading.value = true
      console.log('üîç Loading test data for:', route.params.testId)

      await TestRegistry.discoverTests()
      const testModule = TestRegistry.get(route.params.testId)

      if (!testModule) {
        console.error(`‚ùå Test not found: ${route.params.testId}`)
        router.push('/dashboard')
        return
      }

      currentTest.value = testModule
      console.log('‚úÖ Test loaded:', testModule.config.title)
    } catch (error) {
      console.error('‚ùå Failed to load test:', error)
      router.push('/dashboard')
    } finally {
      isLoading.value = false
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  const initializeQuestionFlow = () => {
    if (!currentTest.value?.config?.initialQuestions) return

    questionsFlow.value = [...currentTest.value.config.initialQuestions]
    loadSavedAnswer()
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const loadSavedAnswer = () => {
    const questionId = currentQuestion.value?.id
    if (questionId && answeredQuestions.value[questionId]) {
      currentAnswer.value = answeredQuestions.value[questionId].answer
    } else {
      currentAnswer.value = currentQuestion.value?.type === 'multiple' ? [] : null
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  const handleAnswerChange = (answer) => {
    currentAnswer.value = answer

    const questionId = currentQuestion.value.id
    answeredQuestions.value[questionId] = {
      questionId,
      question: currentQuestion.value.question,
      answer: answer,
      timestamp: new Date().toISOString(),
      type: currentQuestion.value.type,
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const getNextQuestions = (question, answer) => {
    if (!currentTest.value?.config?.questionFlows) return []

    let nextQuestions = []

    if (question.type === 'single' && question.options) {
      const selectedOption = question.options.find((opt) => opt.value === answer)
      if (selectedOption?.nextFlow) {
        nextQuestions = currentTest.value.config.questionFlows[selectedOption.nextFlow] || []
      }
    }

    if (question.type === 'scale' && question.conditions) {
      for (const [conditionName, config] of Object.entries(question.conditions)) {
        let meetsCondition = false

        if (config.min && config.max) {
          meetsCondition = answer >= config.min && answer <= config.max
        } else if (config.min) {
          meetsCondition = answer >= config.min
        } else if (config.max) {
          meetsCondition = answer <= config.max
        }

        if (meetsCondition && config.nextFlow) {
          nextQuestions = currentTest.value.config.questionFlows[config.nextFlow] || []
          break
        }
      }
    }

    if (question.type === 'multiple' && Array.isArray(answer) && question.options) {
      let maxWeight = 0
      let selectedFlow = null

      answer.forEach((answerValue) => {
        const option = question.options.find((opt) => opt.value === answerValue)
        if (option && option.weight > maxWeight && option.nextFlow) {
          maxWeight = option.weight
          selectedFlow = option.nextFlow
        }
      })

      if (selectedFlow) {
        nextQuestions = currentTest.value.config.questionFlows[selectedFlow] || []
      }
    }

    return nextQuestions
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const goToNextQuestion = () => {
    if (!isCurrentQuestionAnswered.value) return

    const nextQuestions = getNextQuestions(currentQuestion.value, currentAnswer.value)

    if (
      currentQuestionIndex.value >= questionsFlow.value.length - 1 &&
      nextQuestions.length === 0
    ) {
      finishTest()
      return
    }

    if (nextQuestions.length > 0) {
      const insertIndex = currentQuestionIndex.value + 1
      questionsFlow.value.splice(insertIndex, 0, ...nextQuestions)
    }

    currentQuestionIndex.value++
    loadSavedAnswer()
  }

  const goToPreviousQuestion = () => {
    if (canGoToPrevious.value) {
      currentQuestionIndex.value--
      loadSavedAnswer()
    }
  }

  const startTest = () => {
    testStarted.value = true
    initializeQuestionFlow()
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –±–µ–∑ StorageManager
  const finishTest = async () => {
    try {
      console.log('üèÅ Finishing test with answers:', Object.keys(answeredQuestions.value).length)

      if (Object.keys(answeredQuestions.value).length === 0) {
        console.error('No answers to process')
        alert('–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.')
        return
      }

      const demographics = getUserDemographics()

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º calculator –∏–∑ –º–æ–¥—É–ª—è —Ç–µ—Å—Ç–∞
      const result = currentTest.value.calculator.calculate(
        answeredQuestions.value,
        demographics,
        currentTest.value.config,
      )

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º interpreter –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
      let finalResult

      if (currentTest.value.interpreter.interpretWithSections) {
        // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Å–µ–∫—Ü–∏—è–º–∏
        const fullInterpretation = currentTest.value.interpreter.interpretWithSections(result)
        finalResult = {
          ...result,
          interpretation: fullInterpretation.interpretation,
          sections: fullInterpretation.sections,
          testType: fullInterpretation.testType
        }
      } else {
        // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞
        const interpretation = currentTest.value.interpreter.interpret(result.score)
        const personalizedNotes = currentTest.value.interpreter.generatePersonalizedNotes
          ? currentTest.value.interpreter.generatePersonalizedNotes(result.score, demographics)
          : []

        finalResult = {
          ...result,
          interpretation,
          personalizedNotes,
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–æ–ª—è
      finalResult.demographics = demographics
      finalResult.completedAt = new Date().toISOString()
      finalResult.testId = route.params.testId

      console.log('‚úÖ Test result calculated:', {
        testId: finalResult.testId,
        score: finalResult.score,
        hasInterpretation: !!finalResult.interpretation
      })

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ userStore (–±–µ–∑ StorageManager)
      await userStore.saveTestResult(finalResult)

      console.log('üß≠ Navigating to results page...')
      router.push(`/result/${route.params.testId}`)
    } catch (error) {
      console.error('‚ùå Failed to finish test:', error)
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    }
  }

  const goBack = () => {
    const shouldExit =
      !testStarted.value || confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.')

    if (shouldExit) {
      router.push('/dashboard')
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const initialize = async () => {
    if (!userStore.isAuthenticated) {
      router.push('/')
      return
    }

    await loadTestData()
  }

  watch(() => currentQuestionIndex.value, loadSavedAnswer)

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    testStarted,
    currentQuestionIndex,
    currentAnswer,
    questionsFlow,
    answeredQuestions,
    currentTest,
    isLoading,

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    testProgress,
    currentQuestion,
    currentQuestionComponent,
    currentQuestionNumber,
    totalQuestions,
    canGoToPrevious,
    canGoToNext,
    isLastQuestion,
    isCurrentQuestionAnswered,

    // –ú–µ—Ç–æ–¥—ã
    handleAnswerChange,
    goToNextQuestion,
    goToPreviousQuestion,
    startTest,
    finishTest,
    goBack,
    initialize,
  }
}